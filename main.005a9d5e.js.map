{"version":3,"sources":["modules/Game.class.js","modules/Cell.class.js","modules/Grid.class.js","scripts/main.js"],"names":["Game","initialState","inicialState","state","map","row","futureState","score","status","startGame","filterRow","filterZero","i","length","push","filter","item","fututreState","cell","r","slide","isEqual","setTwo","isWin","isLose","reverse","c","hasEmptyTile","found","Math","floor","random","value","forEach","col","some","tile","num","innerText","classList","add","toString","el","user","localStorage","setItem","getItem","module","exports","Cell","field","x","y","document","createElement","append","id","require","GRID_SIZE","CELL_COUNT","Grid","cells","size","board","Array","fill","gameElements","querySelector","best","start","messageWin","messageLose","messageStart","grid","countKeyPress","game","initializeBoard","updateElement","getElementById","getState","updateTile","getBestScore","getScore","addEventListener","textContent","updateScore","getStatus","restart","remove","e","key","preventDefault","code","moveLeft","moveRight","moveUp","moveDown","window","setBestScore"],"mappings":"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","file":"main.005a9d5e.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.inicialState = initialState;\n    this.state = this.inicialState.map((row) => [...row]);\n    this.futureState = [];\n    this.score = 0;\n    this.status = 'idle';\n    this.startGame = false;\n  }\n\n  slide(row) {\n    let filterRow = this.filterZero(row);\n\n    for (let i = 0; i < filterRow.length; i++) {\n      if (filterRow[i] === filterRow[i + 1]) {\n        filterRow[i] *= 2;\n        filterRow[i + 1] = 0;\n        this.score += filterRow[i];\n      }\n    }\n\n    filterRow = this.filterZero(filterRow);\n\n    while (filterRow.length < 4) {\n      filterRow.push(0);\n    }\n\n    return filterRow;\n  }\n\n  filterZero(row) {\n    return row.filter((item) => item !== 0);\n  }\n\n  isEqual(fututreState, state) {\n    for (let row = 0; row < fututreState.length; row++) {\n      for (let cell = 0; cell < fututreState[row].length; cell++) {\n        if (fututreState[row][cell] !== state[row][cell]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  moveLeft() {\n    if (!this.startGame) {\n      return;\n    }\n\n    for (let r = 0; r < 4; r++) {\n      let row = [...this.state[r]];\n\n      row = this.slide(row);\n      this.futureState[r] = row;\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  moveRight() {\n    if (!this.startGame) {\n      return;\n    }\n\n    for (let r = 0; r < 4; r++) {\n      let row = [...this.state[r]];\n\n      row.reverse();\n      row = this.slide(row);\n\n      row.reverse();\n      this.futureState[r] = row;\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  moveUp() {\n    if (!this.startGame) {\n      return;\n    }\n\n    this.futureState = this.state.map((row) => [...row]);\n\n    for (let c = 0; c < 4; c++) {\n      let row = [\n        this.futureState[0][c],\n        this.futureState[1][c],\n        this.futureState[2][c],\n        this.futureState[3][c],\n      ];\n\n      row = this.slide(row);\n\n      for (let r = 0; r < 4; r++) {\n        this.futureState[r][c] = row[r];\n      }\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  moveDown() {\n    if (!this.startGame) {\n      return;\n    }\n\n    this.futureState = this.state.map((row) => [...row]);\n\n    for (let c = 0; c < 4; c++) {\n      let row = [\n        this.futureState[0][c],\n        this.futureState[1][c],\n        this.futureState[2][c],\n        this.futureState[3][c],\n      ];\n\n      row.reverse();\n      row = this.slide(row);\n\n      row.reverse();\n\n      for (let r = 0; r < 4; r++) {\n        this.futureState[r][c] = row[r];\n      }\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  start() {\n    this.status = 'playing';\n    this.startGame = true;\n    this.state = this.inicialState.map((row) => [...row]);\n    this.score = 0;\n\n    this.setTwo();\n    this.setTwo();\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.startGame = false;\n    this.state = this.inicialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  setTwo() {\n    if (!this.hasEmptyTile()) {\n      return;\n    }\n\n    let found = false;\n\n    while (!found) {\n      const r = Math.floor(Math.random() * 4);\n      const c = Math.floor(Math.random() * 4);\n\n      if (this.state[r][c] === 0) {\n        const value = Math.random() < 0.9 ? 2 : 4;\n\n        this.state[r][c] = value;\n\n        found = true;\n      }\n    }\n  }\n\n  hasEmptyTile() {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.state[r][c] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isWin(state) {\n    state.forEach((row) => {\n      row.forEach((col) => {\n        if (col === 2048) {\n          this.status = 'win';\n        }\n      });\n    });\n  }\n\n  isLose() {\n    for (const row of this.state) {\n      if (row.some((i) => i === 0)) {\n        return false;\n      }\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let c = 0; c < 4; c++) {\n      const row = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  updateTile(tile, num) {\n    tile.innerText = '';\n    tile.classList.value = '';\n    tile.classList.add('field__cell');\n\n    if (num > 0) {\n      tile.innerText = num;\n      tile.classList.add('field__cell--' + num.toString());\n    }\n  }\n\n  updateScore(el) {\n    el.innerText = this.score;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  setBestScore(score, user) {\n    if (user === null || user < score) {\n      localStorage.setItem('user', score);\n    }\n  }\n\n  getBestScore() {\n    const user = localStorage.getItem('user');\n\n    if (user === null) {\n      return 0;\n    }\n\n    return user;\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nclass Cell {\n  constructor(field, x, y) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('field__cell');\n    field.append(cell);\n    this.x = x;\n    this.y = y;\n    cell.id = (`${this.y}-${this.x}`);\n  }\n}\n\nmodule.exports = Cell;\n","'use strict';\n// import { Cell} from \"./Cell.class\";\n\nconst Cell = require('./Cell.class');\n\nconst GRID_SIZE = 4;\nconst CELL_COUNT = GRID_SIZE * GRID_SIZE;\n\nclass Grid {\n  constructor(field) {\n    this.cells = [];\n\n    for (let i = 0; i < CELL_COUNT; i++) {\n      this.cells.push(\n        new Cell(field, i % GRID_SIZE, Math.floor(i / GRID_SIZE))\n      );\n    }\n    this.size = GRID_SIZE;\n  }\n\n  initializeBoard() {\n    const board = [];\n\n    for (let i = 0; i < 4; i++) {\n      board.push(Array(4).fill(0));\n    }\n\n    return board;\n  }\n}\n\nmodule.exports = Grid;\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst Grid = require('../modules/Grid.class');\n\nconst gameElements = {\n  score: document.querySelector('[data-score=\"score\"]'),\n  best: document.querySelector('[data-best=\"best\"]'),\n  start: document.querySelector('.button'),\n  field: document.querySelector('.field'),\n  messageWin: document.querySelector('.message__content--win'),\n  messageLose: document.querySelector('.message__content--lose'),\n  messageStart: document.querySelector('.message__content--start'),\n};\n\nconst grid = new Grid(gameElements.field);\n\nlet countKeyPress = 0;\n\nconst game = new Game(grid.initializeBoard());\n\nif (gameElements.score) {\n  gameElements.score.innerText = game.getScore();\n}\n\nif (gameElements.best) {\n  gameElements.best.innerText = game.getBestScore();\n}\n\nfunction updateElement() {\n  for (let r = 0; r < grid.size; r++) {\n    for (let c = 0; c < grid.size; c++) {\n      const tile = document.getElementById(`${r}-${c}`);\n      const num = game.getState()[r][c];\n\n      game.updateTile(tile, num);\n      gameElements.best.innerText = game.getBestScore();\n    }\n  }\n}\n\nupdateElement();\n\ngameElements.start.addEventListener('click', () => {\n  if (gameElements.start.textContent === 'Start') {\n    game.start();\n    updateElement();\n    game.updateScore(gameElements.score);\n    gameElements.messageStart.classList.add('hidden');\n  }\n\n  if (gameElements.start.textContent === 'Restart') {\n    if (game.getStatus() === 'win') {\n      gameElements.messageWin.classList.add('hidden');\n    }\n\n    if (game.getStatus() === 'lose') {\n      gameElements.messageLose.classList.add('hidden');\n    }\n    game.restart();\n    gameElements.start.innerText = 'Start';\n    gameElements.start.classList.add('start');\n    gameElements.start.classList.remove('restart');\n    countKeyPress = 0;\n    updateElement();\n    game.updateScore(gameElements.score);\n    gameElements.messageStart.classList.remove('hidden');\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n    e.preventDefault();\n  }\n});\n\ndocument.addEventListener('keyup', (e) => {\n  switch (game.getStatus()) {\n    case 'playing':\n      switch (e.code) {\n        case 'ArrowLeft':\n          game.moveLeft();\n          break;\n        case 'ArrowRight':\n          game.moveRight();\n          break;\n        case 'ArrowUp':\n          game.moveUp();\n          break;\n        case 'ArrowDown':\n          game.moveDown();\n          break;\n        default:\n          break;\n      }\n\n      updateElement();\n      countKeyPress++;\n      break;\n    case 'win':\n      gameElements.messageWin.classList.remove('hidden');\n      break;\n    case 'lose':\n      gameElements.messageLose.classList.remove('hidden');\n      break;\n    default:\n      break;\n  }\n\n  game.updateScore(gameElements.score);\n\n  const user = window.localStorage.getItem('user');\n\n  game.setBestScore(game.getScore(), user);\n\n  if (countKeyPress >= 1) {\n    gameElements.start.innerText = 'Restart';\n    gameElements.start.classList.remove('start');\n    gameElements.start.classList.add('restart');\n  }\n});\n"]}